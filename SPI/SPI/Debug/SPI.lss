
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000124  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a2  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000638  00000000  00000000  00000a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038f  00000000  00000000  00001052  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000013e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037f  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000097  00000000  00000000  0000181b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000018b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_12>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  7a:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_12>:

#include "SPI_Interface.h"
#include <avr/interrupt.h>
uint8_t c=5;
ISR (SPI_STC_vect)
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
	c++;
  8e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  92:	8f 5f       	subi	r24, 0xFF	; 255
  94:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	SPI_IT_SEND(c);
  98:	8f b9       	out	0x0f, r24	; 15
}
  9a:	8f 91       	pop	r24
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <main>:

int main(void)
{
	
	DDRB|=1<<4;
  a6:	87 b3       	in	r24, 0x17	; 23
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	87 bb       	out	0x17, r24	; 23
	PORTB&=~(1<<4);
  ac:	88 b3       	in	r24, 0x18	; 24
  ae:	8f 7e       	andi	r24, 0xEF	; 239
  b0:	88 bb       	out	0x18, r24	; 24
    SPI_Init(MASTER,SPI_SCK_DIV_4);
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 67 00 	call	0xce	; 0xce <SPI_Init>
	SPI_IT_Enable();
  ba:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_IT_Enable>
	*((volatile uint8_t*)(0x5f))|=1<<7;
  be:	8f b7       	in	r24, 0x3f	; 63
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	8f bf       	out	0x3f, r24	; 63
    SPI_Send(c);
  c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c8:	0e 94 88 00 	call	0x110	; 0x110 <SPI_Send>
  cc:	ff cf       	rjmp	.-2      	; 0xcc <main+0x26>

000000ce <SPI_Init>:
}
uint8_t SPI_Recive()
{
	while(!GET_BIT(SPSR_REG,7));
	return SPDR_REG;
}
  ce:	81 11       	cpse	r24, r1
  d0:	0a c0       	rjmp	.+20     	; 0xe6 <SPI_Init+0x18>
  d2:	87 b3       	in	r24, 0x17	; 23
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	87 bb       	out	0x17, r24	; 23
  d8:	87 b3       	in	r24, 0x17	; 23
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	87 bb       	out	0x17, r24	; 23
  de:	8d b1       	in	r24, 0x0d	; 13
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	8d b9       	out	0x0d, r24	; 13
  e4:	08 c0       	rjmp	.+16     	; 0xf6 <SPI_Init+0x28>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	31 f4       	brne	.+12     	; 0xf6 <SPI_Init+0x28>
  ea:	8d b1       	in	r24, 0x0d	; 13
  ec:	8f 7e       	andi	r24, 0xEF	; 239
  ee:	8d b9       	out	0x0d, r24	; 13
  f0:	87 b3       	in	r24, 0x17	; 23
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	87 bb       	out	0x17, r24	; 23
  f6:	8d b1       	in	r24, 0x0d	; 13
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	8d b9       	out	0x0d, r24	; 13
  fc:	8d b1       	in	r24, 0x0d	; 13
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	8d b9       	out	0x0d, r24	; 13
 102:	8d b1       	in	r24, 0x0d	; 13
 104:	8c 7f       	andi	r24, 0xFC	; 252
 106:	8d b9       	out	0x0d, r24	; 13
 108:	8d b1       	in	r24, 0x0d	; 13
 10a:	68 2b       	or	r22, r24
 10c:	6d b9       	out	0x0d, r22	; 13
 10e:	08 95       	ret

00000110 <SPI_Send>:
 110:	8f b9       	out	0x0f, r24	; 15
 112:	77 9b       	sbis	0x0e, 7	; 14
 114:	fe cf       	rjmp	.-4      	; 0x112 <SPI_Send+0x2>
 116:	08 95       	ret

00000118 <SPI_IT_Enable>:

void SPI_IT_Enable()
{
	SET_BIT(SPCR_REG,7);
 118:	8d b1       	in	r24, 0x0d	; 13
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8d b9       	out	0x0d, r24	; 13
 11e:	08 95       	ret

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
