
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ae  0000016c  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a8  00000000  00000000  000003eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001459  00000000  00000000  00000493  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000077c  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005ac  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000148  00000000  00000000  00002614  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ff  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000627  00000000  00000000  0000295b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  00002f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000304  00000304  000003b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000300c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.ADC_Init 00000010  000002da  000002da  0000038e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.ADC_ChSelect 00000024  00000282  00000282  00000336  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ADC_AutoTriggerEnable 0000002e  00000228  00000228  000002dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.ADC_SOC 00000008  000002f4  000002f4  000003a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADC_read 0000000a  000002ea  000002ea  0000039e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADC_IT_Enable 00000008  000002fc  000002fc  000003b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.ADC_AutoFlag 00000001  00800060  00800060  000003bc  2**0
                  ALLOC
 20 .text.LCD_Command 00000056  00000140  00000140  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCD_Char 00000056  00000196  00000196  0000024a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCD_Init 0000003c  000001ec  000001ec  000002a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCD_String 0000002c  00000256  00000256  0000030a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LCD_Clear 0000001a  000002a6  000002a6  0000035a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000a  000000ae  000000ae  00000162  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.main    00000088  000000b8  000000b8  0000016c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.libgcc  0000001a  000002c0  000002c0  00000374  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
   8:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
   c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  10:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  14:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  18:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  1c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  20:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  24:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  28:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  2c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  30:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  34:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  38:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  3c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  40:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  44:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  48:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  4c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  50:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 61       	ori	r16, 0x10	; 16
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  a6:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

00000304 <__bad_interrupt>:
 304:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.ADC_Init:

000002da <ADC_Init>:
	SET_BIT(ADCSRA_REG,5);
}
void ADC_AutoTriggerDisable()
{
	ADC_AutoFlag=0;
	CLEAR_BIT(ADCSRA_REG,5);
 2da:	60 68       	ori	r22, 0x80	; 128
 2dc:	66 b9       	out	0x06, r22	; 6
 2de:	82 95       	swap	r24
 2e0:	88 0f       	add	r24, r24
 2e2:	88 0f       	add	r24, r24
 2e4:	80 7c       	andi	r24, 0xC0	; 192
 2e6:	87 b9       	out	0x07, r24	; 7
 2e8:	08 95       	ret

Disassembly of section .text.ADC_ChSelect:

00000282 <ADC_ChSelect>:
 282:	87 70       	andi	r24, 0x07	; 7
 284:	9a b3       	in	r25, 0x1a	; 26
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	08 2e       	mov	r0, r24
 28c:	02 c0       	rjmp	.+4      	; 0x292 <ADC_ChSelect+0x10>
 28e:	22 0f       	add	r18, r18
 290:	33 1f       	adc	r19, r19
 292:	0a 94       	dec	r0
 294:	e2 f7       	brpl	.-8      	; 0x28e <ADC_ChSelect+0xc>
 296:	20 95       	com	r18
 298:	29 23       	and	r18, r25
 29a:	2a bb       	out	0x1a, r18	; 26
 29c:	97 b1       	in	r25, 0x07	; 7
 29e:	98 7f       	andi	r25, 0xF8	; 248
 2a0:	89 2b       	or	r24, r25
 2a2:	87 b9       	out	0x07, r24	; 7
 2a4:	08 95       	ret

Disassembly of section .text.ADC_AutoTriggerEnable:

00000228 <ADC_AutoTriggerEnable>:
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 22e:	90 b7       	in	r25, 0x30	; 48
 230:	9f 77       	andi	r25, 0x7F	; 127
 232:	90 bf       	out	0x30, r25	; 48
 234:	90 b7       	in	r25, 0x30	; 48
 236:	9f 7b       	andi	r25, 0xBF	; 191
 238:	90 bf       	out	0x30, r25	; 48
 23a:	90 b7       	in	r25, 0x30	; 48
 23c:	9f 7d       	andi	r25, 0xDF	; 223
 23e:	90 bf       	out	0x30, r25	; 48
 240:	20 b7       	in	r18, 0x30	; 48
 242:	30 e2       	ldi	r19, 0x20	; 32
 244:	83 9f       	mul	r24, r19
 246:	c0 01       	movw	r24, r0
 248:	11 24       	eor	r1, r1
 24a:	82 2b       	or	r24, r18
 24c:	80 bf       	out	0x30, r24	; 48
 24e:	86 b1       	in	r24, 0x06	; 6
 250:	80 62       	ori	r24, 0x20	; 32
 252:	86 b9       	out	0x06, r24	; 6
 254:	08 95       	ret

Disassembly of section .text.ADC_SOC:

000002f4 <ADC_SOC>:
}
void ADC_SOC()
{
    
	SET_BIT(ADCSRA_REG,6);
 2f4:	86 b1       	in	r24, 0x06	; 6
 2f6:	80 64       	ori	r24, 0x40	; 64
 2f8:	86 b9       	out	0x06, r24	; 6
 2fa:	08 95       	ret

Disassembly of section .text.ADC_read:

000002ea <ADC_read>:
	SET_BIT(ADCSRA_REG,5);
}
void ADC_AutoTriggerDisable()
{
	ADC_AutoFlag=0;
	CLEAR_BIT(ADCSRA_REG,5);
 2ea:	36 99       	sbic	0x06, 6	; 6
 2ec:	fe cf       	rjmp	.-4      	; 0x2ea <ADC_read>
 2ee:	84 b1       	in	r24, 0x04	; 4
 2f0:	95 b1       	in	r25, 0x05	; 5
 2f2:	08 95       	ret

Disassembly of section .text.ADC_IT_Enable:

000002fc <ADC_IT_Enable>:
	//}
}

void ADC_IT_Enable()
{
	SET_BIT(ADCSRA_REG,3);
 2fc:	86 b1       	in	r24, 0x06	; 6
 2fe:	88 60       	ori	r24, 0x08	; 8
 300:	86 b9       	out	0x06, r24	; 6
 302:	08 95       	ret

Disassembly of section .text.LCD_Command:

00000140 <LCD_Command>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
 140:	98 b3       	in	r25, 0x18	; 24
 142:	9f 70       	andi	r25, 0x0F	; 15
 144:	28 2f       	mov	r18, r24
 146:	20 7f       	andi	r18, 0xF0	; 240
 148:	92 2b       	or	r25, r18
 14a:	98 bb       	out	0x18, r25	; 24
 14c:	98 b3       	in	r25, 0x18	; 24
 14e:	9e 7f       	andi	r25, 0xFE	; 254
 150:	98 bb       	out	0x18, r25	; 24
 152:	98 b3       	in	r25, 0x18	; 24
 154:	92 60       	ori	r25, 0x02	; 2
 156:	98 bb       	out	0x18, r25	; 24
 158:	00 00       	nop
 15a:	98 b3       	in	r25, 0x18	; 24
 15c:	9d 7f       	andi	r25, 0xFD	; 253
 15e:	98 bb       	out	0x18, r25	; 24
 160:	32 e4       	ldi	r19, 0x42	; 66
 162:	3a 95       	dec	r19
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_Command+0x22>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_Command+0x28>
 168:	28 b3       	in	r18, 0x18	; 24
 16a:	30 e1       	ldi	r19, 0x10	; 16
 16c:	83 9f       	mul	r24, r19
 16e:	c0 01       	movw	r24, r0
 170:	11 24       	eor	r1, r1
 172:	92 2f       	mov	r25, r18
 174:	9f 70       	andi	r25, 0x0F	; 15
 176:	89 2b       	or	r24, r25
 178:	88 bb       	out	0x18, r24	; 24
 17a:	88 b3       	in	r24, 0x18	; 24
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	88 bb       	out	0x18, r24	; 24
 180:	00 00       	nop
 182:	88 b3       	in	r24, 0x18	; 24
 184:	8d 7f       	andi	r24, 0xFD	; 253
 186:	88 bb       	out	0x18, r24	; 24
 188:	83 ef       	ldi	r24, 0xF3	; 243
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_Command+0x4c>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_Command+0x52>
 192:	00 00       	nop
 194:	08 95       	ret

Disassembly of section .text.LCD_Char:

00000196 <LCD_Char>:
 196:	98 b3       	in	r25, 0x18	; 24
 198:	9f 70       	andi	r25, 0x0F	; 15
 19a:	28 2f       	mov	r18, r24
 19c:	20 7f       	andi	r18, 0xF0	; 240
 19e:	92 2b       	or	r25, r18
 1a0:	98 bb       	out	0x18, r25	; 24
 1a2:	98 b3       	in	r25, 0x18	; 24
 1a4:	91 60       	ori	r25, 0x01	; 1
 1a6:	98 bb       	out	0x18, r25	; 24
 1a8:	98 b3       	in	r25, 0x18	; 24
 1aa:	92 60       	ori	r25, 0x02	; 2
 1ac:	98 bb       	out	0x18, r25	; 24
 1ae:	00 00       	nop
 1b0:	98 b3       	in	r25, 0x18	; 24
 1b2:	9d 7f       	andi	r25, 0xFD	; 253
 1b4:	98 bb       	out	0x18, r25	; 24
 1b6:	32 e4       	ldi	r19, 0x42	; 66
 1b8:	3a 95       	dec	r19
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_Char+0x22>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_Char+0x28>
 1be:	28 b3       	in	r18, 0x18	; 24
 1c0:	30 e1       	ldi	r19, 0x10	; 16
 1c2:	83 9f       	mul	r24, r19
 1c4:	c0 01       	movw	r24, r0
 1c6:	11 24       	eor	r1, r1
 1c8:	92 2f       	mov	r25, r18
 1ca:	9f 70       	andi	r25, 0x0F	; 15
 1cc:	89 2b       	or	r24, r25
 1ce:	88 bb       	out	0x18, r24	; 24
 1d0:	88 b3       	in	r24, 0x18	; 24
 1d2:	82 60       	ori	r24, 0x02	; 2
 1d4:	88 bb       	out	0x18, r24	; 24
 1d6:	00 00       	nop
 1d8:	88 b3       	in	r24, 0x18	; 24
 1da:	8d 7f       	andi	r24, 0xFD	; 253
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	83 ef       	ldi	r24, 0xF3	; 243
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCD_Char+0x4c>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCD_Char+0x52>
 1e8:	00 00       	nop
 1ea:	08 95       	ret

Disassembly of section .text.LCD_Init:

000001ec <LCD_Init>:
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	87 bb       	out	0x17, r24	; 23
 1f0:	87 e8       	ldi	r24, 0x87	; 135
 1f2:	93 e1       	ldi	r25, 0x13	; 19
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_Init+0x8>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_Init+0xe>
 1fa:	00 00       	nop
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_Command>
 202:	88 e2       	ldi	r24, 0x28	; 40
 204:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_Command>
 208:	8c e0       	ldi	r24, 0x0C	; 12
 20a:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_Command>
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_Command>
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_Command>
 21a:	83 ef       	ldi	r24, 0xF3	; 243
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_Init+0x32>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_Init+0x38>
 224:	00 00       	nop
 226:	08 95       	ret

Disassembly of section .text.LCD_String:

00000256 <LCD_String>:
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	8c 01       	movw	r16, r24
 260:	c0 e0       	ldi	r28, 0x00	; 0
 262:	d0 e0       	ldi	r29, 0x00	; 0
 264:	03 c0       	rjmp	.+6      	; 0x26c <LCD_String+0x16>
 266:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_Char>
 26a:	21 96       	adiw	r28, 0x01	; 1
 26c:	f8 01       	movw	r30, r16
 26e:	ec 0f       	add	r30, r28
 270:	fd 1f       	adc	r31, r29
 272:	80 81       	ld	r24, Z
 274:	81 11       	cpse	r24, r1
 276:	f7 cf       	rjmp	.-18     	; 0x266 <LCD_String+0x10>
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	08 95       	ret

Disassembly of section .text.LCD_Clear:

000002a6 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	83 ef       	ldi	r24, 0xF3	; 243
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCD_Clear+0xa>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_Clear+0x10>
 2b6:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 2b8:	80 e8       	ldi	r24, 0x80	; 128
 2ba:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_Command>
 2be:	08 95       	ret

Disassembly of section .text.main:

000000b8 <main>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	2a 97       	sbiw	r28, 0x0a	; 10
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
  cc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCD_Init>
  d0:	66 e0       	ldi	r22, 0x06	; 6
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 6d 01 	call	0x2da	; 0x2da <ADC_Init>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 14 01 	call	0x228	; 0x228 <ADC_AutoTriggerEnable>
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 41 01 	call	0x282	; 0x282 <ADC_ChSelect>
  e4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <ADC_SOC>
  e8:	0e 94 75 01 	call	0x2ea	; 0x2ea <ADC_read>
  ec:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ADC_IT_Enable>
  f0:	8f b7       	in	r24, 0x3f	; 63
  f2:	80 68       	ori	r24, 0x80	; 128
  f4:	8f bf       	out	0x3f, r24	; 63
  f6:	0e 94 75 01 	call	0x2ea	; 0x2ea <ADC_read>
  fa:	9c 01       	movw	r18, r24
  fc:	0f 2e       	mov	r0, r31
  fe:	fe ea       	ldi	r31, 0xAE	; 174
 100:	cf 2e       	mov	r12, r31
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	df 2e       	mov	r13, r31
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	ef 2e       	mov	r14, r31
 10a:	f0 2d       	mov	r31, r0
 10c:	85 e0       	ldi	r24, 0x05	; 5
 10e:	f6 01       	movw	r30, r12
 110:	de 01       	movw	r26, r28
 112:	11 96       	adiw	r26, 0x01	; 1
 114:	7e 2d       	mov	r23, r14
 116:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__movmemx_qi>
 11a:	fe 01       	movw	r30, r28
 11c:	36 96       	adiw	r30, 0x06	; 6
 11e:	85 e0       	ldi	r24, 0x05	; 5
 120:	df 01       	movw	r26, r30
 122:	1d 92       	st	X+, r1
 124:	8a 95       	dec	r24
 126:	e9 f7       	brne	.-6      	; 0x122 <main+0x6a>
 128:	2f 5f       	subi	r18, 0xFF	; 255
 12a:	31 40       	sbci	r19, 0x01	; 1
 12c:	29 30       	cpi	r18, 0x09	; 9
 12e:	31 05       	cpc	r19, r1
 130:	10 f7       	brcc	.-60     	; 0xf6 <main+0x3e>
 132:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_Clear>
 136:	ce 01       	movw	r24, r28
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_String>
 13e:	db cf       	rjmp	.-74     	; 0xf6 <main+0x3e>

Disassembly of section .text.libgcc:

000002c0 <__movmemx_qi>:
 2c0:	99 27       	eor	r25, r25

000002c2 <__movmemx_hi>:
 2c2:	77 fd       	sbrc	r23, 7
 2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__movmemx_hi+0xe>
 2c6:	05 90       	lpm	r0, Z+
 2c8:	0d 92       	st	X+, r0
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <__movmemx_hi+0x4>
 2ce:	08 95       	ret
 2d0:	01 90       	ld	r0, Z+
 2d2:	0d 92       	st	X+, r0
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <__movmemx_hi+0xe>
 2d8:	08 95       	ret
