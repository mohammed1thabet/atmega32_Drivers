
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076c  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000614  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003af  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000399  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a3  00000000  00000000  000017b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_Init>:
		CLEAR_BIT(UCSRB_REG,0);
		else
		SET_BIT(UCSRB_REG,0);
	}
	
	UDR_REG=Data;
  6c:	8b b1       	in	r24, 0x0b	; 11
  6e:	8b b9       	out	0x0b, r24	; 11
  70:	80 b5       	in	r24, 0x20	; 32
  72:	80 68       	ori	r24, 0x80	; 128
  74:	80 bd       	out	0x20, r24	; 32
  76:	80 b5       	in	r24, 0x20	; 32
  78:	80 bd       	out	0x20, r24	; 32
  7a:	80 b5       	in	r24, 0x20	; 32
  7c:	86 60       	ori	r24, 0x06	; 6
  7e:	80 bd       	out	0x20, r24	; 32
  80:	8b b1       	in	r24, 0x0b	; 11
  82:	8b b9       	out	0x0b, r24	; 11
  84:	80 b5       	in	r24, 0x20	; 32
  86:	8f 77       	andi	r24, 0x7F	; 127
  88:	80 bd       	out	0x20, r24	; 32
  8a:	83 e2       	ldi	r24, 0x23	; 35
  8c:	89 b9       	out	0x09, r24	; 9
  8e:	84 e0       	ldi	r24, 0x04	; 4
  90:	80 bd       	out	0x20, r24	; 32
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	88 61       	ori	r24, 0x18	; 24
  96:	8a b9       	out	0x0a, r24	; 10
  98:	08 95       	ret

0000009a <UART_Recive>:
}
uint16_t UART_Recive()
{
	uint16_t Data=0;
	
	while(!GET_BIT(UCSRA_REG,7));
  9a:	5f 9b       	sbis	0x0b, 7	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <UART_Recive>
	Data=UDR_REG;
  9e:	8c b1       	in	r24, 0x0c	; 12
	{
	    Data|=GET_BIT(UCSRB_REG,1)<<8;	
	}
	
	return Data;
}
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	08 95       	ret

000000a4 <main>:

int main(void)
{
	uint8_t i=0;
	uint16_t j=0;
	UART_Init();
  a4:	0e 94 36 00 	call	0x6c	; 0x6c <UART_Init>
	
	while (1)
	{
		if(UART_Recive()==60)
  a8:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_Recive>
  ac:	cc 97       	sbiw	r24, 0x3c	; 60
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x4>
		{
			DDRA=0x01<<i;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	8a bb       	out	0x1a, r24	; 26
			PORTA=0x01<<i;
  b4:	8b bb       	out	0x1b, r24	; 27
  b6:	f8 cf       	rjmp	.-16     	; 0xa8 <main+0x4>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
